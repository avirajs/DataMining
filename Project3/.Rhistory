typeof(x)
x <- c(3,12,6,-5,0,8,15,1,-10,7)
typeof(x)
q()
library("tidyverse")
library("ggplot2")
library("ggrepel")
library("ggcorrplot")
library("DT")
cases <- read.csv("COVID-19_cases_plus_census.csv")
cases <- cases %>% mutate_if(is.character, factor)
head(cases)
dim(cases)
cases <- read.csv("COVID-19_cases_plus_census.csv")
library("rJava")
install.packages("rJava")
library("rJava")
find.java <- function() {
for (root in c("HLM", "HCU")) for (key in c("Software\\JavaSoft\\Java Runtime Environment",
"Software\\JavaSoft\\Java Development Kit")) {
hive <- try(utils::readRegistry(key, root, 2),
silent = TRUE)
if (!inherits(hive, "try-error"))
return(hive)
}
hive
}
find.java()
library("rJava")
library("rJava")
library("tidyverse")
library("tidyverse")
install.packages(c("backports", "data.table", "sys", "xfun"))
library("tidyverse")
library("tidyverse")
library("tidyverse")
library("tidyverse")
setwd("~/GitHub/DataMining/Project3")
library("ggplot2")
library("DT")
library("plyr")
library(rpart)
library(rjava)
library("rjava")
cases_current <- read.csv("COVID-19_cases_plus_census.csv")
cases_current <- cases_current %>% mutate_if(is.character, factor)
cases_current$date %>% unique
dim(cases_current)
cases_old <- read.csv("COVID-19_cases_plus_census_enddate.csv")
cases_old <- cases_old %>% mutate_if(is.character, factor)
cases_old$date %>% unique
#make predicive variables death and cases across time
delta_columns <- cases_current[6:7] - cases_old[6:7]
delta_columns
delta_columns <- delta_columns %>% dplyr::rename(cases_delta = confirmed_cases, deaths_delta = deaths )
cases <- rbind.fill(cases_current, delta_columns)
# joining data sets for population density and health care
pop_dense_county <- read_csv("Population-Density_By_County.csv")  %>% mutate_if(is.character, factor)
cases <- cases %>% left_join(pop_dense_county,by = c("county_fips_code"= "GCT_STUB.target-geo-id2" ))
dim(cases)
healthcare_county <- read_csv("healthcare_services_per_county.csv")  %>% mutate_if(is.character, factor)
cases <- cases %>% left_join(healthcare_county,by = c("county_fips_code"= "FIPS" ))
dim(cases)
cases %>% colnames
cases_pop_scaled <- cases %>% mutate(
cases_per_1000 = confirmed_cases/total_pop,
deaths_per_1000 = deaths/total_pop,
cases_delta_per_1000 = confirmed_cases/total_pop,
deaths_delta_per_1000 = deaths/total_pop,
death_per_case = deaths/confirmed_cases,
percent_black = black_pop/total_pop,
percent_male = male_pop/total_pop,
unemployment_rate = unemployed_pop/total_pop,
population_density = `Density per square mile of land area`,
percent_commuters = `commuters_16_over`/total_pop,
icu_bed_pop = `ICU Beds`/total_pop,
primary_care_1000 = `Active Primary Care Physicians per 100,000 Population, 2018 (AAMC)`,
commuters_by_public_transportation = commuters_by_public_transportation/ total_pop,
households = households / total_pop,
housing_units = housing_units / total_pop,
vacant_housing_units = vacant_housing_units / total_pop,
in_school = in_school / total_pop,
in_undergrad_college = in_undergrad_college / total_pop
)
cases_select <- cases_pop_scaled %>% filter(confirmed_cases > 10) %>%
arrange(desc(confirmed_cases)) %>%
select(county_name,cases_delta_per_1000,deaths_delta_per_1000,cases_delta_per_1000,deaths_delta_per_1000,
death_per_case,percent_black,percent_male,unemployment_rate,population_density,
percent_commuters,icu_bed_pop,primary_care_1000,commuters_by_public_transportation,
households,housing_units,vacant_housing_units,
in_school,in_undergrad_college,in_undergrad_college,
median_income,median_age)
#clean na
which(is.na(cases_select), arr.ind=TRUE)
cases_select[1487,]
cases_select <- na.omit(cases_select)
cases_select <- cases_select %>% mutate(
cases_per_1000_levels =  as.factor(cut_number(cases_select$cases_delta_per_1000,3)),
deaths_per_1000_levels = as.factor(cut_number(cases_select$deaths_delta_per_1000,3))
)
#all variable scaled
cases_select_scaled <- cases_select %>% mutate_if(is.numeric,scale)
cases_select <- cases_select %>% mutate(
cases_per_1000_levels =  as.factor(cut_number(cases_select$cases_delta_per_1000,3)),
deaths_per_1000_levels = as.factor(cut_number(cases_select$deaths_delta_per_1000,3))
)
#all variable scaled
cases_select_scaled <- cases_select %>% mutate_if(is.numeric,scale)
cases_select_scaled %>% group_by(deaths_per_1000_levels) %>% tally()
View(cases_select_scaled)
#all variable scaled
cases_select_scaled <- cases_select %>% mutate_if(is.numeric,scale)
cases_select_scaled %>% group_by(cases_per_1000_levels) %>% tally()
library(FSelector)
cases_select_scaled %>%  chi.squared(deaths_per_1000_levels ~ ., data = .) %>%
arrange(desc(attr_importance))
cases_select_scaled %>%  chi.squared(cases_per_1000_levels ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
cases_select_scaled_tree <- cases_select_scaled%>% select(-deaths_delta_per_1000)
cases_select_scaled_tree %>%  chi.squared(cases_per_1000_levels ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
cases_select_scaled_tree %>%  chi.squared(deaths_per_1000_levels ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
cases_select_scaled_tree <- cases_select_scaled%>% select(-cases_delta_per_1000)
cases_select_scaled_tree %>%  chi.squared(cases_per_1000_levels ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
cases_selec %>%  chi.squared(deaths_per_1000_levels ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
cases_select %>%  chi.squared(deaths_per_1000_levels ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
library(FSelector)
cases_select %>%  chi.squared(deaths_per_1000_levels ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
View(cases_select)
library(caret)
fit <- cases_select %>%
train(deaths_per_1000_levels ~ . - county_name,
data = . ,
method = "rpart",
trControl = trainControl(method = "cv", number = 10)
)
fit
fit <- cases_select_scaled_tree %>%
train(deaths_per_1000_levels ~ . - county_name,
data = . ,
method = "rpart",
trControl = trainControl(method = "cv", number = 10)
)
fit
rpart.plot(fit$finalModel, extra = 2)
library(rpart.plot)
rpart.plot(fit$finalModel, extra = 2)
cases_select_scaled_tree <- cases_select_scaled%>% select(-deaths_delta_per_1000)
cases_select_scaled_tree <- cases_select_scaled%>% select(-cases_delta_per_1000)
View(cases_select_scaled_tree)
cases_select_scaled_tree <- cases_select_scaled%>% select(-deaths_delta_per_1000, -cases_delta_per_1000)
fit <- cases_select_scaled_tree %>%
train(deaths_per_1000_levels ~ . - county_name,
data = . ,
method = "rpart",
trControl = trainControl(method = "cv", number = 10)
)
fit
library(rpart.plot)
rpart.plot(fit$finalModel, extra = 2)
cases_select_scaled_tree <- cases_select_scaled%>% select(-deaths_delta_per_1000, -cases_delta_per_1000, -death_per_case)
fit <- cases_select_scaled_tree %>%
train(deaths_per_1000_levels ~ . - county_name,
data = . ,
method = "rpart",
trControl = trainControl(method = "cv", number = 10)
)
fit
rpart.plot(fit$finalModel, extra = 2)
fit <- cases_select_scaled_tree %>%
train(deaths_per_1000_levels ~ . - county_name, - cases_per_1000_levels
data = . ,
method = "rpart",
trControl = trainControl(method = "cv", number = 10)
)
fit <- cases_select_scaled_tree %>%
train(deaths_per_1000_levels ~ . - county_name, - cases_per_1000_levels,
data = . ,
method = "rpart",
trControl = trainControl(method = "cv", number = 10)
)
fit <- cases_select_scaled_tree %>%
train(deaths_per_1000_levels ~ . - county_name .  - cases_per_1000_levels,
data = . ,
method = "rpart",
trControl = trainControl(method = "cv", number = 10)
)
fit <- cases_select_scaled_tree %>%
train(deaths_per_1000_levels ~ . - county_name - cases_per_1000_levels,
data = . ,
method = "rpart",
trControl = trainControl(method = "cv", number = 10)
)
fit
rpart.plot(fit$finalModel, extra = 2)
cases_select_tree <- cases_select
View(cases_select_tree)
cases_select <- cases_pop_scaled %>% filter(confirmed_cases > 10) %>%
arrange(desc(confirmed_cases)) %>%
select(county_name,cases_per_1000,deaths_per_1000,cases_delta_per_1000,deaths_delta_per_1000,
death_per_case,percent_black,percent_male,unemployment_rate,population_density,
percent_commuters,icu_bed_pop,primary_care_1000,commuters_by_public_transportation,
households,housing_units,vacant_housing_units,
in_school,in_undergrad_college,in_undergrad_college,
median_income,median_age)
#clean na
which(is.na(cases_select), arr.ind=TRUE)
cases_select[1487,]
cases_select <- na.omit(cases_select)
cases_select_tree <- cases_select
cases_select_tree <- cases_select_tree%>% mutate(high_risk = as.factor(deaths_per_1000 > 1))
cases_select_tree %>%  chi.squared(high_risk ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
cases_sel %>% pull(high_risk) %>% table()
cases_select_tree %>% pull(high_risk) %>% table()
View(cases)
cases_pop_scaled <- cases %>% mutate(
cases_per_1000 = confirmed_cases/total_pop*1000,
deaths_per_1000 = deaths/total_pop*1000,
cases_delta_per_1000 = confirmed_cases/total_pop,
deaths_delta_per_1000 = deaths/total_pop,
death_per_case = deaths/confirmed_cases,
percent_black = black_pop/total_pop,
percent_male = male_pop/total_pop,
unemployment_rate = unemployed_pop/total_pop,
population_density = `Density per square mile of land area`,
percent_commuters = `commuters_16_over`/total_pop,
icu_bed_pop = `ICU Beds`/total_pop,
primary_care_1000 = `Active Primary Care Physicians per 100,000 Population, 2018 (AAMC)`,
commuters_by_public_transportation = commuters_by_public_transportation/ total_pop,
households = households / total_pop,
housing_units = housing_units / total_pop,
vacant_housing_units = vacant_housing_units / total_pop,
in_school = in_school / total_pop,
in_undergrad_college = in_undergrad_college / total_pop
)
cases_select <- cases_pop_scaled %>% filter(confirmed_cases > 10) %>%
arrange(desc(confirmed_cases)) %>%
select(county_name,cases_per_1000,deaths_per_1000,cases_delta_per_1000,deaths_delta_per_1000,
death_per_case,percent_black,percent_male,unemployment_rate,population_density,
percent_commuters,icu_bed_pop,primary_care_1000,commuters_by_public_transportation,
households,housing_units,vacant_housing_units,
in_school,in_undergrad_college,in_undergrad_college,
median_income,median_age)
#clean na
which(is.na(cases_select), arr.ind=TRUE)
cases_select[1487,]
cases_select <- na.omit(cases_select)
cases_select <- cases_select %>% mutate(
cases_per_1000_levels =  as.factor(cut_number(cases_select$cases_delta_per_1000,3)),
deaths_per_1000_levels = as.factor(cut_number(cases_select$deaths_delta_per_1000,3))
)
cases_select_tree <- cases_select
cases_select_tree <- cases_select_tree%>% mutate(high_risk = as.factor(deaths_per_1000 > 1))
cases_select_tree %>% pull(high_risk) %>% table()
cases_select_tree %>%  chi.squared(high_risk ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
cases_select_tree <- cases_select%>% select(-deaths_per_1000, -cases_per_1000, -death_per_case)
cases_select_tree %>%  chi.squared(high_risk ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
cases_select_tree <- cases_select
cases_select_tree <- cases_select_tree%>% mutate(high_risk = as.factor(deaths_per_1000 > 1))
cases_select_tree %>% pull(high_risk) %>% table()
cases_select_tree <- cases_select_tree%>% select(-deaths_per_1000, -cases_per_1000, -death_per_case)
cases_select_tree %>%  chi.squared(high_risk ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
cases_select_tree <- cases_select_tree%>% select(-deaths_per_1000, -cases_per_1000, -death_per_case, -deaths_delta_per_1000)
cases_select_tree <- cases_select_tree%>% select(-deaths_per_1000, -cases_per_1000, -death_per_case)
View(cases_select_scaled_tree)
cases_select_tree %>%  chi.squared(high_risk ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
fit <- cases_select_scaled_tree %>%
train(high_risk ~ . - county_name,
data = . ,
method = "rpart",
trControl = trainControl(method = "cv", number = 10)
)
cases_select_tree <- cases_select
cases_select_tree <- cases_select_tree%>% mutate(high_risk = as.factor(deaths_per_1000 > 1))
cases_select_tree %>% pull(high_risk) %>% table()
cases_select_tree <- cases_select_tree%>% select(-deaths_per_1000, -cases_per_1000, -death_per_case)
cases_select_tree %>%  chi.squared(high_risk ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
library(caret)
fit <- cases_select_scaled_tree %>%
train(high_risk ~ . - county_name,
data = . ,
method = "rpart",
trControl = trainControl(method = "cv", number = 10)
)
fit <- cases_select_tree %>%
train(high_risk ~ . - county_name,
data = . ,
method = "rpart",
trControl = trainControl(method = "cv", number = 10)
)
fit
library(rpart.plot)
rpart.plot(fit$finalModel, extra = 2)
cases_select_tree <- cases_select_tree%>% select(-deaths_delta_per_1000,-cases_delta_per_1000)
cases_select_tree %>%  chi.squared(high_risk ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
fit <- cases_select_tree %>%
train(high_risk ~ . - county_name,
data = . ,
method = "rpart",
trControl = trainControl(method = "cv", number = 10)
)
fit
rpart.plot(fit$finalModel, extra = 2)
cases_current <- read.csv("COVID-19_cases_plus_census.csv")
cases_current <- cases_current %>% mutate_if(is.character, factor)
cases_current$date %>% unique
dim(cases_current)
cases_old <- read.csv("COVID-19_cases_plus_census_enddate.csv")
cases_old <- cases_old %>% mutate_if(is.character, factor)
cases_old$date %>% unique
#make predicive variables death and cases across time
delta_columns <- cases_current[6:7] - cases_old[6:7]
delta_columns
delta_columns <- delta_columns %>% dplyr::rename(cases_delta = confirmed_cases, deaths_delta = deaths )
cases <- rbind.fill(cases_current, delta_columns)
# joining data sets for population density and health care
pop_dense_county <- read_csv("Population-Density_By_County.csv")  %>% mutate_if(is.character, factor)
cases <- cases %>% left_join(pop_dense_county,by = c("county_fips_code"= "GCT_STUB.target-geo-id2" ))
dim(cases)
healthcare_county <- read_csv("healthcare_services_per_county.csv")  %>% mutate_if(is.character, factor)
cases <- cases %>% left_join(healthcare_county,by = c("county_fips_code"= "FIPS" ))
dim(cases)
cases %>% colnames
cases_pop_scaled <- cases %>% mutate(
cases_per_1000 = confirmed_cases/total_pop*1000,
deaths_per_1000 = deaths/total_pop*1000,
cases_delta_per_1000 = confirmed_cases/total_pop,
deaths_delta_per_1000 = deaths/total_pop,
death_per_case = deaths/confirmed_cases,
percent_black = black_pop/total_pop,
percent_male = male_pop/total_pop,
unemployment_rate = unemployed_pop/total_pop,
population_density = `Density per square mile of land area`,
percent_commuters = `commuters_16_over`/total_pop,
icu_bed_pop = `ICU Beds`/total_pop,
primary_care_1000 = `Active Primary Care Physicians per 100,000 Population, 2018 (AAMC)`,
commuters_by_public_transportation = commuters_by_public_transportation/ total_pop,
households = households / total_pop,
housing_units = housing_units / total_pop,
vacant_housing_units = vacant_housing_units / total_pop,
in_school = in_school / total_pop,
in_undergrad_college = in_undergrad_college / total_pop
)
cases_select <- cases_pop_scaled %>% filter(confirmed_cases > 10) %>%
arrange(desc(confirmed_cases)) %>%
select(county_name,cases_per_1000,deaths_per_1000,cases_delta_per_1000,deaths_delta_per_1000,
death_per_case,percent_black,percent_male,unemployment_rate,population_density,
percent_commuters,icu_bed_pop,primary_care_1000,commuters_by_public_transportation,
households,housing_units,vacant_housing_units,
in_school,in_undergrad_college,in_undergrad_college,
median_income,median_age)
#clean na
which(is.na(cases_select), arr.ind=TRUE)
cases_select[1487,]
cases_select <- na.omit(cases_select)
cases_select_tree <- cases_select
cases_select_tree <- cases_select_tree%>% mutate(high_risk = as.factor(deaths_per_1000 > 1))
cases_select_tree %>% pull(high_risk) %>% table()
cases_select_tree <- cases_select_tree%>% select(-deaths_per_1000, -cases_per_1000, -death_per_case)
cases_select_tree <- cases_select_tree%>% select(-deaths_delta_per_1000,-cases_delta_per_1000)
cases_select_tree %>%  chi.squared(high_risk ~ ., data = .) %>%
arrange(desc(attr_importance) )%>% head()
library(caret)
fit <- cases_select_tree %>%
train(high_risk ~ . - county_name,
data = . ,
method = "rpart",
trControl = trainControl(method = "cv", number = 10)
)
fit
rpart.plot(fit$finalModel, extra = 2)
varImp(fit)
cases_select_tree <- cases_select
cases_select_tree <- cases_select_tree%>% mutate(high_risk = as.factor(deaths_per_1000 > 1))
cases_select_tree <- cases_select_tree%>% mutate(high_risk = as.factor(deaths_per_1000 > 2))
cases_select_tree %>% pull(high_risk) %>% table()
cases_select_tree <- cases_select_tree%>% mutate(med_risk = as.factor(cases_per_1000 > 1))
cases_select_tree %>% pull(mid_risk) %>% table()
cases_pop_scaled <- cases %>% mutate(
cases_per_1000 = confirmed_cases/total_pop*1000,
deaths_per_1000 = deaths/total_pop*1000,
cases_delta_per_1000 = confirmed_cases/total_pop*1000,
deaths_delta_per_1000 = deaths/total_pop*1000,
death_per_case = deaths/confirmed_cases,
percent_black = black_pop/total_pop,
percent_male = male_pop/total_pop,
unemployment_rate = unemployed_pop/total_pop,
population_density = `Density per square mile of land area`,
percent_commuters = `commuters_16_over`/total_pop,
icu_bed_pop = `ICU Beds`/total_pop,
primary_care_1000 = `Active Primary Care Physicians per 100,000 Population, 2018 (AAMC)`,
commuters_by_public_transportation = commuters_by_public_transportation/ total_pop,
households = households / total_pop,
housing_units = housing_units / total_pop,
vacant_housing_units = vacant_housing_units / total_pop,
in_school = in_school / total_pop,
in_undergrad_college = in_undergrad_college / total_pop
)
cases_select <- cases_pop_scaled %>% filter(confirmed_cases > 10) %>%
arrange(desc(confirmed_cases)) %>%
select(county_name,cases_per_1000,deaths_per_1000,cases_delta_per_1000,deaths_delta_per_1000,
death_per_case,percent_black,percent_male,unemployment_rate,population_density,
percent_commuters,icu_bed_pop,primary_care_1000,commuters_by_public_transportation,
households,housing_units,vacant_housing_units,
in_school,in_undergrad_college,in_undergrad_college,
median_income,median_age)
#clean na
which(is.na(cases_select), arr.ind=TRUE)
cases_select[1487,]
cases_select <- na.omit(cases_select)
cases_select <- cases_select %>% mutate(
cases_per_1000_levels =  as.factor(cut_number(cases_select$cases_delta_per_1000,3)),
deaths_per_1000_levels = as.factor(cut_number(cases_select$deaths_delta_per_1000,3))
)
cases_select_tree <- cases_select
cases_select_tree <- cases_select_tree%>% mutate(high_risk = as.factor(deaths_per_1000 > 1))
